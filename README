The dataset for this project is not freely available, but I can supply the code to generate it. With a Riot API Key, one can run the code and generate the dataset. This does unfortunately still take an incredibly long time since Riot has severe rate limiting restrictions in place. It requires a file 'saved_state_' to exist, containing various state info so the dataset does not contain duplicates. I have provided the initial saved_state file. The dataset can then by generated by running:

	> python dataset_builder.py <riot_api_key>

This will run for about 10 hours and generate about 18000 games worth of data. It will update the 'saved_state' file so next time the script is run, it will continue building the same dataset.

------------------------

This project relies on the Riot Games API for data and a couple functions. The Riot API requires a developer key for access, this must be supplied to my program in a file named 'config.ini'. I have provided a template file that gives the exact structure of this config file.

This project makes extensive use of PySpark. It therefore requires PySpark to be correctly installed. The config.ini file also requires the path to Spark to be supplied.

Once the config file has been setup, the standalone part of the code (performing the learning algorithm) can be executed by running:

	> python predictor/learner.py

This file will take about 6-10 minutes to run. It will output its results to 'out'. This file will contain a variety of statistics about each classifier's performance on the data in the data folder (training and testing).

In order to run the Django server, Django must be installed. At this point, the webserver can easily by run (as a development version) by executing:
	
	> python manage.py runserver

It will be served on localhost:8000. Both the Django server and the standalone learner.py must be from the the LeaguePredictor directory (for now).

------------------------

The URL for my video demo of the system is: http://youtu.be/y_Q_UPQfWVA
